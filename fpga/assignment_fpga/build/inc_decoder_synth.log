
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)


-- Parsing `/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v
Parsing Verilog input from `/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v' to AST representation.
Generating RTLIL representation for module `\inc_decoder'.
Successfully finished Verilog frontend.

-- Running command `tcl /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: inc_decoder         
Automatically selected inc_decoder as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \inc_decoder

4.3.3. Analyzing design hierarchy..
Top module:  \inc_decoder
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$205 in module MULT.
Marked 2 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187 in module Q_FRAG.
Marked 2 switch rules as full_case in process $proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1 in module inc_decoder.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 34 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$188'.
  Set init value: \QZ = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$170'.
  Set init value: \g = 1'1
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$169'.
  Set init value: \f = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$168'.
  Set init value: \e = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$167'.
  Set init value: \d = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$166'.
  Set init value: \c = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$165'.
  Set init value: \b = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$164'.
  Set init value: \a = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$163'.
  Set init value: \Z = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$162'.
  Set init value: \Y = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$161'.
  Set init value: \X = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$160'.
  Set init value: \W = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:28$159'.
  Set init value: \clock1 = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:27$158'.
  Set init value: \D = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:26$157'.
  Set init value: \C = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:25$156'.
  Set init value: \B = 1'0
Found init rule in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:24$155'.
  Set init value: \A = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.
Found async reset \QRT in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$205'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$188'.
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$170'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$169'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$168'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$167'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$166'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$165'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$164'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$163'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$162'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$161'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$160'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:28$159'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:27$158'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:26$157'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:25$156'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:24$155'.
Creating decoders for process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
     1/21: $2\D[0:0]
     2/21: $2\C[0:0]
     3/21: $2\B[0:0]
     4/21: $2\A[0:0]
     5/21: $1\D[0:0]
     6/21: $1\C[0:0]
     7/21: $1\B[0:0]
     8/21: $1\A[0:0]
     9/21: $1\clock1[0:0]
    10/21: $1\g[0:0]
    11/21: $1\f[0:0]
    12/21: $1\e[0:0]
    13/21: $1\d[0:0]
    14/21: $1\c[0:0]
    15/21: $1\b[0:0]
    16/21: $1\a[0:0]
    17/21: $1\Z[0:0]
    18/21: $1\Y[0:0]
    19/21: $1\X[0:0]
    20/21: $1\W[0:0]
    21/21: $1\delay[26:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$205'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1131' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\inc_decoder.\A' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1132' with positive edge clock.
Creating register for signal `\inc_decoder.\B' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1133' with positive edge clock.
Creating register for signal `\inc_decoder.\C' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1134' with positive edge clock.
Creating register for signal `\inc_decoder.\D' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1135' with positive edge clock.
Creating register for signal `\inc_decoder.\X' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1136' with positive edge clock.
Creating register for signal `\inc_decoder.\Y' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1137' with positive edge clock.
Creating register for signal `\inc_decoder.\a' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1138' with positive edge clock.
Creating register for signal `\inc_decoder.\b' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1139' with positive edge clock.
Creating register for signal `\inc_decoder.\c' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1140' with positive edge clock.
Creating register for signal `\inc_decoder.\d' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1141' with positive edge clock.
Creating register for signal `\inc_decoder.\e' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1142' with positive edge clock.
Creating register for signal `\inc_decoder.\f' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1143' with positive edge clock.
Creating register for signal `\inc_decoder.\g' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1144' with positive edge clock.
Creating register for signal `\inc_decoder.\delay' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1145' with positive edge clock.
Creating register for signal `\inc_decoder.\clock1' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1146' with positive edge clock.
Creating register for signal `\inc_decoder.\W' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1147' with positive edge clock.
Creating register for signal `\inc_decoder.\Z' using process `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
  created $dff cell `$procdff$1148' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$205'.
Removing empty process `MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$205'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$188'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$187'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$170'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$169'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$168'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$167'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$166'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$165'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:30$164'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$163'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$162'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$161'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:29$160'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:28$159'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:27$158'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:26$157'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:25$156'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:24$155'.
Found and cleaned up 2 empty switches in `\inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
Removing empty process `inc_decoder.$proc$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:31$1'.
Cleaned up 7 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.
<suppressed ~9 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 8 unused cells and 91 unused wires.
<suppressed ~9 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
<suppressed ~276 debug messages>
Removed a total of 92 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1048.
    dead port 2/2 on $mux $procmux$1054.
    dead port 2/2 on $mux $procmux$1060.
    dead port 2/2 on $mux $procmux$1066.
Removed 4 multiplexer ports.
<suppressed ~13 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \X = 1'0 to constant driver in module inc_decoder.
Promoting init spec \Y = 1'0 to constant driver in module inc_decoder.
Promoting init spec \W = 1'0 to constant driver in module inc_decoder.
Promoting init spec \Z = 1'0 to constant driver in module inc_decoder.
Promoted 4 init specs to constant drivers.

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 96 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.13. Executing CHECK pass (checking for obvious problems).
checking module inc_decoder..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell inc_decoder.$add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2 ($add).
Removed top 5 bits (of 32) from port Y of cell inc_decoder.$add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2 ($add).
Removed top 7 bits (of 32) from port B of cell inc_decoder.$gt$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:37$3 ($gt).
Removed top 5 bits (of 32) from wire inc_decoder.$add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module inc_decoder:
  creating $macc model for $add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2 ($add).
  creating $alu model for $macc $add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2.
  creating $alu model for $gt$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:37$3 ($gt): new $alu
  creating $alu cell for $gt$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:37$3: $auto$alumacc.cc:485:replace_alu$1151
  creating $alu cell for $add$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:33$2: $auto$alumacc.cc:485:replace_alu$1156
  created 2 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.
<suppressed ~13 debug messages>

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$10
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$6
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$8
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$13
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$15
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$17
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$19
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:45$22
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:45$24
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:50$48
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$105
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$107
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$108
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$83
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$87
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$89
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$91
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$97
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$112
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$114
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$115
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$121
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$127
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$131
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$132
cell type $and$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:55$140
cell type $auto$alumacc.cc:485:replace_alu$1151
cell type $auto$alumacc.cc:485:replace_alu$1156
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:42$4
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$5
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$7
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$18
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:49$26
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:49$27
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:49$29
cell type $logic_not$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:58$153
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:43$11
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$16
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:44$20
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:45$25
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:49$38
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:50$49
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:52$73
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$103
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$109
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$85
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$92
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:53$98
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$122
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$128
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:54$133
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:55$147
cell type $or$/data/data/com.termux/files/home/fpga-examples/decoders/inc_decoder.v:55$152
cell type $procdff$1132
cell type $procdff$1133
cell type $procdff$1134
cell type $procdff$1135
cell type $procdff$1138
cell type $procdff$1139
cell type $procdff$1140
cell type $procdff$1141
cell type $procdff$1142
cell type $procdff$1143
cell type $procdff$1144
cell type $procdff$1145
cell type $procdff$1146
cell type $procmux$1046
cell type $procmux$1052
cell type $procmux$1058
cell type $procmux$1064
cell type $procmux$1069
cell type $procmux$1072
cell type $procmux$1075
cell type $procmux$1078
cell type $procmux$1081
cell type $procmux$1084
cell type $procmux$1087
cell type $procmux$1090
cell type $procmux$1093
cell type $procmux$1096
cell type $procmux$1099
cell type $procmux$1102
cell type $procmux$1117
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~477 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.
<suppressed ~277 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 83 unused cells and 173 unused wires.
<suppressed ~84 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module inc_decoder..
  Treeifying 43 MUXes:
    Found tree with 2 MUXes at root $0\A[0:0].
    Found tree with 2 MUXes at root $0\B[0:0].
    Found tree with 2 MUXes at root $0\C[0:0].
    Found tree with 2 MUXes at root $0\D[0:0].
    Found tree with 1 MUXes at root $0\a[0:0].
    Found tree with 1 MUXes at root $0\b[0:0].
    Found tree with 1 MUXes at root $0\c[0:0].
    Found tree with 1 MUXes at root $0\d[0:0].
    Found tree with 1 MUXes at root $0\e[0:0].
    Found tree with 1 MUXes at root $0\f[0:0].
    Found tree with 1 MUXes at root $0\g[0:0].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 1 MUXes at root $0\clock1[0:0].
    Finished treeification: Found 39 trees.
  Covering trees:
    Replaced tree at $0\A[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\B[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\C[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\D[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\a[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\b[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\c[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\d[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\e[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\f[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\g[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\clock1[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~1072 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module inc_decoder:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2139 for $0\A[0:0] -> \A.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1349.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2159 for $0\B[0:0] -> \B.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1350.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2179 for $0\C[0:0] -> \C.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1351.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2199 for $0\D[0:0] -> \D.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1352.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2219 for $0\a[0:0] -> \a.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1353.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2226 for $0\b[0:0] -> \b.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1354.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2233 for $0\c[0:0] -> \c.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1355.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2240 for $0\d[0:0] -> \d.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1356.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2247 for $0\e[0:0] -> \e.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1357.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2254 for $0\f[0:0] -> \f.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1358.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2261 for $0\g[0:0] -> \g.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1359.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2268 for $0\clock1[0:0] -> \clock1.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1387.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~39 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.
<suppressed ~36 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 198 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \inc_decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \inc_decoder.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\inc_decoder'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\inc_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 223 gates and 256 wires to a netlist network with 32 inputs and 41 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       95
ABC RESULTS:        internal signals:      183
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       41
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 174 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
No more expansions possible.
<suppressed ~433 debug messages>
Removed 0 unused cells and 190 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 95 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 773 objects in module inc_decoder (16 iterations).
<suppressed ~205 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \inc_decoder

4.58.2. Analyzing design hierarchy..
Top module:  \inc_decoder
Removed 0 unused modules.

4.59. Printing statistics.

=== inc_decoder ===

   Number of wires:                 89
   Number of wire bits:            141
   Number of public wires:          89
   Number of public wire bits:     141
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                135
     LUT1                            2
     LUT2                           25
     LUT3                           35
     LUT4                           33
     dff                            27
     dffe                           12
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module inc_decoder..
Warning: Wire inc_decoder.A has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.B has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.C has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.D has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.a has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.b has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.c has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.clock1 has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.d has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.e has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.f has an unprocessed 'init' attribute.
Warning: Wire inc_decoder.g has an unprocessed 'init' attribute.
found and reported 12 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on inc_decoder.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port inc_decoder.a using outpad.
Mapping port inc_decoder.b using outpad.
Mapping port inc_decoder.c using outpad.
Mapping port inc_decoder.d using outpad.
Mapping port inc_decoder.e using outpad.
Mapping port inc_decoder.f using outpad.
Mapping port inc_decoder.g using outpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 7 unused wires.
<suppressed ~7 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module inc_decoder..
found and reported 0 problems.

5. Printing statistics.

=== inc_decoder ===

   Number of wires:                143
   Number of wire bits:            143
   Number of public wires:         136
   Number of public wire bits:     136
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                143
     LUT1                            2
     LUT2                           25
     LUT3                           35
     LUT4                           33
     dff                            27
     dffe                           12
     logic_0                         1
     outpad                          7
     qlal4s3b_cell_macro             1

Loading PCF from '/data/data/com.termux/files/home/fpga-examples/decoders/pygmy.pcf'...
Loading pinmap CSV from '/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$inc_decoder.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$inc_decoder.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$inc_decoder.c
  outpad     | d          | 63         | X18Y3    | BIDIR    | $iopadmap$inc_decoder.d
  outpad     | e          | 61         | X20Y3    | BIDIR    | $iopadmap$inc_decoder.e
  outpad     | f          | 59         | X24Y3    | BIDIR    | $iopadmap$inc_decoder.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$inc_decoder.g

6. Executing Verilog backend.
Dumping module `\inc_decoder'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.
<suppressed ~1 debug messages>

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template dff for cells of type dff.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$b8e400b0c524196854471b6867fb4998e798de7d\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$2c16e524d34079620431678c7f0a8026eb93e228\LUT4 for cells of type LUT4.
Using template $paramod$5c78c2936b979d140e9c5335a1758330d6e05c7b\LUT4 for cells of type LUT4.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$ff2e5cbde8581985efc7fcce5ccd6d147decc8f8\LUT3 for cells of type LUT3.
Using template $paramod$5198abf5ef98e6a0b63e0942c582d5fb5feaeb0d\LUT3 for cells of type LUT3.
Using template $paramod$885d448b152f0d0eb07370269f766062b2b71bdb\LUT4 for cells of type LUT4.
Using template $paramod$0d57a20297f7d814347a60e796eb37c1dbe1a686\LUT3 for cells of type LUT3.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$1f22ed6c7002e8d2949c35b69b42d33f3d67af46\LUT4 for cells of type LUT4.
Using template $paramod$7e4bd054dbbe83c893326033e721a854d7384b31\LUT3 for cells of type LUT3.
Using template dffe for cells of type dffe.
Using template $paramod$5406a0490d3fcc762132b74ed159b39020c81749\LUT4 for cells of type LUT4.
Using template $paramod$029fb7df092d5131df78ff0be68aad451d319cc4\LUT3 for cells of type LUT3.
Using template $paramod$73295daa79cd8f21300ad173a8fb0822f56672dc\LUT3 for cells of type LUT3.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$2760d949562be3a1888b531500ae2c18edae8891\LUT3 for cells of type LUT3.
Using template $paramod$599d262041b1d3a38da932c48ee6b03f5bd83570\LUT3 for cells of type LUT3.
Using template $paramod$b4f3093653c37ab52e4fc54e9275d31065b080d1\LUT3 for cells of type LUT3.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\outpad for cells of type outpad.
No more expansions possible.
<suppressed ~585 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module inc_decoder.
<suppressed ~453 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \inc_decoder..
Removed 0 unused cells and 187 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== inc_decoder ===

   Number of wires:               1339
   Number of wire bits:           1456
   Number of public wires:        1309
   Number of public wire bits:    1309
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     ASSP                            1
     BIDIR_CELL                      7
     C_FRAG                         33
     F_FRAG                          2
     Q_FRAG                         39
     T_FRAG                         60

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\inc_decoder'.

Warnings: 20 unique messages, 23 total
End of script. Logfile hash: d513ed7ed0, CPU: user 10.32s system 0.52s, MEM: 261.37 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)
Time spent: 58% 18x read_verilog (6 sec), 8% 24x opt_clean (0 sec), ...
